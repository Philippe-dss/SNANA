
c *********************************************************
c Created May 2008   by R.Kessler
c
c
c User-cradle file for snana to read sn-data files
c and apply cuts.
c This file contains the USR[INI,ANA,END] routines,
c with some examples on how to access light curve data.
c
c Create your own executable with
c   > snmake.pl snana_private
c   (produces snana_private.exe)
c
c You can also rename this file to any other name,
c such as 
c   > cp snana_private.cra  myana.cra
c   > snmake.pl myana
c   (produces myana.exe)
c
c
c In addition to the USR[INI,ANA,END] routines,
c you can install any official routine from
c   $SNANA_DIR/src/snana.car
c
c into this file so that your private version over-rides
c the official version.
c
c --------------------------------------------------------

+NAMES,8,6000,48000.
+USE,LINUX.
+USE,SNANA,KCOR.

+USE,P=*SNCOM.
+USE,P=*SNMAIN,T=EXE.
+PAM,LUN=10, T=A,C. snana.lnk


c patch in user code (see below)

+USE,P=*USRCOM.
+USE,P=*USRCODE,T=EXE.


C =======================================
+PATCH,*USRCOM.

  
C ===================================
+PATCH,*USRCODE.


C ===========================================
+DECK,USRINI.
      SUBROUTINE USRINI(IERR)
c
c User init: (read input, open files, etc ...)
c Called before SN have been read.
c -------------------------------------
      IMPLICIT NONE
+CDE,SNDATCOM. 
      INTEGER IERR ! (O) 0 => OK
C ------------------- BEGIN ---------------------
      IERR = 0
      RETURN
      END

C ==============================
+DECK,USRINI2.
      SUBROUTINE USRINI2(IERR)
c
c 2nd init, called ater first SN is read.
c
      IMPLICIT NONE
+CDE,SNDATCOM. 
      INTEGER IERR ! (O) 0 => OK
C ------------------- BEGIN ---------------------
      IERR = 0
      RETURN
      END      
C ===========================================
+DECK,USRANA.
      SUBROUTINE USRANA(IERR)
c
c User analysis routine called after each Supernova is read & analyzed.
c See SNLC_XXX varibales in 
c      $SNANA_DIR/src/snana.car
c
c -------------------------------------
      IMPLICIT NONE
+CDE,SNDATCOM. 
+CDE,FILTCOM.

c declare subroutine args

      INTEGER IERR ! (O) 0 => OK

c local variables

      INTEGER 
     &   CID     ! candidate id
     &  ,NEWMJD
     &  ,EPMIN, EPMAX, ep
     &  ,IFILT, IFILT_OBS

      REAL 
     &   RA, DEC, MJD
     &  ,PEAKMJD, REDSHIFT
     &  ,Tobs, Trest
     &  ,FLUX, FLUXCAL, MAG, MAG_ERR
     &  ,FLUX_ERR, FLUXCAL_ERR, GAIN, ZPADU
     &  ,SIMAV, SIMDELTA, SIMMAG

      CHARACTER cfilt*2, CCID*12

C ------------------- BEGIN ---------------------

      IERR = 0

      CID       = SNLC_CID   ! integer CID
      CCID      = SNLC_CCID  ! character CCID
      RA        = SNLC8_RA
      DEC       = SNLC8_DEC
      REDSHIFT  = SNLC_REDSHIFT
      PEAKMJD   = SNLC_SEARCH_PEAKMJD

c extract info that depends on epoch and filter

c start with loop over MJDs

      DO 200 NEWMJD = 1, ISNLC_NEWMJD_STORE

c get pointers to filter info
        EPMIN = ISNLC_EPOCH_RANGE_NEWMJD(1,NEWMJD)
        EPMAX = ISNLC_EPOCH_RANGE_NEWMJD(2,NEWMJD)

c get basic info for this MJD

        MJD   = SNLC8_MJD(EPMIN)
        Tobs  = MJD - PEAKMJD
        Trest = Tobs / (1. + REDSHIFT)

c loop over filter(s) for this NEWMJD
        DO 201 EP = EPMIN, EPMAX

c get absolute ovserver filter-index
          IFILT_OBS = ISNLC_IFILT_OBS(ep)

c convert absolute filter indx to single-char 
          CFILT = FILTDEF_STRING(ifilt_obs:ifilt_obs)

c here is the sparse index used for storage
          IFILT     = IFILTDEF_INVMAP_SURVEY(ifilt_obs)

c extract some info from common block
          MJD          = SNLC8_MJD(ep)
          FLUX         = SNLC_FLUX(ep)            ! ADU
          FLUX_ERR     = SNLC_FLUX_ERRTOT(ep)     ! ADU
          FLUXCAL      = SNLC_FLUXCAL(ep)         ! 10*[-0.4*mag+11]
          FLUXCAL_ERR  = SNLC_FLUXCAL_ERRTOT(ep)
          GAIN         = SNLC_GAIN(ep)            ! Npe per ADU
          ZPADU        = SNLC_ZEROPT(ep)          ! ZP in ADU

          IF ( LSIM_SNANA ) THEN
             SIMMAG = SIM_EPMAGOBS(ep) ! true (unperturbed) mag             
          ENDIF

          if ( SNLC_CID .LT. -3 ) then
             write(6,20) MJD, cfilt, mag, simmag
20           format(T5,'MJD=',F9.3, 3x,'FILT=',A,3x,
     &           'MAG,SIMMAG=', 2F7.3)
          endif

201     CONTINUE  ! ep
200   CONTINUE   ! NEWMJD

c get some sim-truth for simulation

      IF ( LSIM_SNANA ) THEN
        SIMAV    = SIM_COLORPAR
      ENDIF

      RETURN
      END

C ===========================================
+DECK,USREND.
      SUBROUTINE USREND(IERR)
c
c User end-routine after all analysis/fits are done. 
c [close files, summarize statistics, global analysis, etc ...]
c
c -------------------------------------
      IMPLICIT NONE
+CDE,SNDATCOM. 
      INTEGER IERR ! (O) 0 => OK
C ------------------- BEGIN ---------------------
      IERR = 0
      RETURN
      END

