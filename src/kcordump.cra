C
C April 2016: Add args K_xy and REST_COLOR
C 


+USE,LINUX.
+USE,KCOR.

+USE,P=*SNCOM.
cc +USE,P=*CALIB,T=EXE.   ! for debugging
+PAM,LUN=10, T=A,C. snana.lnk

c patch in user code (see below)

+USE,P=*KCORDUMP.
+USE,P=*KCORDUMP,T=EXE.


+PATCH,*KCORDUMP.

+KEEP,NOTES.

C
C Created Feb 10, 2007 by R.Kessler
C 
C Utility to read K-corrections from hbook file
C [created by kcor.exe], and to dump K-cors as
C a function of epoch or a function or redshift.
C
C
C
C USAGE:
C
C  Example: dump K_Bg at z=0.04 for all rest-frame epochs:
C  > kcordump.exe KCOR_FILE  kcor_SDSSAB_Bessell.fits _
C                 K_Bg   Z .04  TREST ALL  REST_COLOR B-V 0.23
C
C
C  Example: dump K_Ug at Trest = 1.0 for all redshfits
C  > kcordump.exe KCOR_FILE  kcor_SDSS_Bessell90_BD17.fits  _ 
C                 K_ug  z ALL  TREST 1.0  REST_COLOR B-V 0.23
C
C  Example: dump K_Ug at all Trest and all redshifts
C  > kcordump.exe KCOR_FILE  kcor_SDSS_Bessell90_BD17.fits  _ 
C                 K_ug  z ALL  TREST ALL  REST_COLOR B-V 0.23
C
C
C
C  If you leave out an argument on the command line, 
C  the program will prompt you for the arguments 
C  missing from the command line.
C
C
C     HISTORY
C   ~~~~~~~~~~
C  Dec 7, 2007: fix code by calling SET_FILTMAP("SDSS").
C               Works only for SDSS K-corrs until the K-cor
C               filename is parsed to get the survey name.
C
C
C Apr 27, 2009: finally works for arbitrary survey after
C               fixing RDKCOR to work in STANDALONE mode.
C               No longer need to call RDSURVEY.
C
C Apr 2013: 
C   - fix code with call to SET_SURVEY
C   - replace HFILE_KCOR key with KCOR_FILE; see examples above.
C
C ----------------------------------------------

+KEEP,DUMPCOM.

      REAL
     &   REDSHIFT_DMP_BINSIZE
     &  ,TREST_DMP_MIN
     &  ,TREST_DMP_MAX
     &  ,TREST_DMP_BINSIZE

      PARAMETER (
     &   REDSHIFT_DMP_BINSIZE = 0.01
     &  ,TREST_DMP_MIN        = -20.0
     &  ,TREST_DMP_MAX        = +80.0
     &  ,TREST_DMP_BINSIZE    =   1.0
     &    )


      CHARACTER 
     &   STRING_Kxy*8, STRING_REST_COLOR*4  ! Apr 2016

      INTEGER 
     &   IFILT_REST_DMP       ! (I) rest-frame filter index
     &  ,IFILT_OBS_DMP        ! (I) observer frame filter index
     &  ,IFILT_RESTCOLOR_DMP(2) ! (I) rest-color (default=0.0) (Apr 2016)

      REAL
     &   Trest_DMP       ! (I) rest-frame epoch, days
     &  ,redshift_DMP    ! (I) redshift
     &  ,REDSHIFT_DMP_RANGE(2)
     &  ,TREST_DMP_RANGE(2)
     &  ,MAGREST_COLOR, MAGREST(2)

      INTEGER 
     &   NZBIN_DMP, NTBIN_DMP

      COMMON / DUMPCOM /
     &   STRING_Kxy,     STRING_REST_COLOR, MAGREST_COLOR, MAGREST
     &  ,IFILT_REST_DMP, IFILT_OBS_DMP, IFILT_RESTCOLOR_DMP
     &  ,Trest_DMP,      redshift_DMP
     &  ,TREST_DMP_RANGE,   REDSHIFT_DMP_RANGE
     &  ,NZBIN_DMP,         NTBIN_DMP
    
C ==============================================
+DECK,MAIN.
      PROGRAM KCORDUMP

      IMPLICIT NONE   
+CDE,DUMPCOM.
+CDE,SNDATCOM.
+CDE,SNLCINP.
+CDE,FILTCOM.

      INTEGER 
     &   i, LL, IERR
     &  ,IZ, IT, IFILE, NFILTDEF, ISTAT

      REAL*8 Z8, T8, AVWARP8, KCOR8, ERR8

      character cfilt_rest*1, cfilt_obs*1

c function
      REAL*8  GET_KCOR8, GET_KCORERR8, GET_AVWARP8

C --------------- BEGIN -----------------


c init user args.

      AVWARP8 = DBLE(0.0)

      REDSHIFT_DMP   = -9.0
      TREST_DMP      = -99.0
      IFILT_REST_DMP = -9
      IFILT_OBS_DMP  = -9
      KCOR_FILE      = ''
      IFILT_RESTCOLOR_DMP(1) = -9 
      IFILT_RESTCOLOR_DMP(2) = -9 

c read command line args.

      NLINE_ARGS = IARGC()
      DO i = 1, NLINE_ARGS
cc xxx        CALL GETARG(i, LINE_ARGS(i) )  ! read command-line args
cc xxx        LL = INDEX ( LINE_ARGS(i), ' ' )  - 1
        USE_LINE_ARGS(i) = .FALSE.
cc xxx        print*,'  COMMAND LINE ARG = ', LINE_ARGS(i)(1:LL)
      ENDDO

      CALL INIT_SNVAR(IERR)

c --------------------------------------------------
C parse command line args
      CALL PARSE_KCORDUMP_ARGS

c --------------------------------------------------
c pass filter info to snana before reading kcor file
      NFILTDEF = 1
      CALL SET_SURVEY("DUMMY", NFILTDEF, IFILT_OBS_DMP )

c -------------------------------------
c read filters and K-corrections

      CALL RDKCOR ( KCOR_FILE, IERR )

c --------------------------------
c  if redshift is 'ALL', then use z-range in kcor file

      IF ( NZBIN_DMP .GT.1 ) THEN
        CALL SET_REDSHIFT_ALL
      ENDIF

      IF ( IFILT_RESTCOLOR_DMP(2) > 0 ) THEN
         print*,' ' 
         print*,'   RestFrame ', STRING_REST_COLOR,' = ', MAGREST_COLOR
      ENDIF
c -----------------------------
      print*,' '
      print*,' BEGIN KCOR DUMP: '
      print*,' '

      cfilt_rest = filtdef_string(ifilt_rest_dmp:ifilt_rest_dmp)
      cfilt_obs  = filtdef_string(ifilt_obs_dmp:ifilt_obs_dmp)

      write(6,15) cfilt_rest, cfilt_obs
15    format(T8, 'REDSHIFT   Trest   AVwarp    K_',A,A,'    ERROR'  )
      print*,'# -----------------------------------------------------'

      DO iz = 1, NZBIN_DMP
 
         Z8 = REDSHIFT_DMP_RANGE(1) + 
     &        REDSHIFT_DMP_BINSIZE * float(iz-1)

      DO it = 1, NTBIN_DMP

         T8 = TREST_DMP_RANGE(1) + 
     &        TREST_DMP_BINSIZE * float(it-1)

         IF( IFILT_RESTCOLOR_DMP(1) > 0 ) THEN
           AVWARP8  = GET_AVWARP8(T8, Zat10pc     ! (I)
     &             ,MAGREST(1)
     &             ,MAGREST(2)                   ! (I)
     &             ,IFILT_RESTCOLOR_DMP(1)
     &             ,IFILT_RESTCOLOR_DMP(2)        ! (I)
     &             ,istat )                       ! (O)
        ENDIF

        KCOR8 = GET_KCOR8 ( ifilt_Rest_dmp, ifilt_obs_dmp, 
     &         T8, Z8, AVWARP8 )

        ERR8 = GET_KCORERR8 ( OPT_KCORERR_SJ,
     &        ifilt_Rest_dmp, ifilt_obs_dmp, T8, Z8, AVWARP8 )

        write(6,20) Z8, T8, AVwarp8, KCOR8, ERR8
20      format('KCOR: ', F8.3, F10.2, F8.3,  2F10.5 )

      ENDDO
      ENDDO

      STOP
      END

C ===========================
+DECK,PRSKARGS.
      SUBROUTINE PARSE_KCORDUMP_ARGS()
      IMPLICIT NONE   
+CDE,DUMPCOM.
+CDE,SNDATCOM.
+CDE,SNLCINP.
+CDE,FILTCOM.

c Apr 28 2016: read K_xy and REST_COLOR 

      INTEGER i, LL, ilast, iuse
      CHARACTER ctemp*40, cfilt*2, FNAM*20
      CHARACTER ARG*(MXCHAR_ARG), ARG_NEXT*(MXCHAR_ARG)
      
      INTEGER FILTINDX
      
C --------------- BEGIN ---------------

      FNAM = 'PARSE_KCORDUMP_ARGS'
      NTBIN_DMP = 1
      NZBIN_DMP = 1

      i = 1
      ilast = 1

      DO WHILE ( i .LE. NLINE_ARGS )

        CALL GETARG(i,   ARG)
        CALL GETARG(i+1, ARG_NEXT)
        LL = INDEX(ARG, ' ' ) - 1
        print*,'     PROCESS COMMAND LINE ARG: ', ARG(1:LL)

         if ( ARG .EQ. 'FILT_REST' ) then
            i = i + 1   
            READ(ARG_NEXT,*) CFILT
            IFILT_REST_DMP = FILTINDX(CFILT)

         else if ( ARG .EQ. 'FILT_OBS' ) then
            i = i + 1   
            READ(ARG_NEXT,*) CFILT
            IFILT_OBS_DMP = FILTINDX(CFILT)

         else if ( ARG(1:2) .EQ. 'K_' ) then ! Apr 28 2016
            STRING_Kxy = ARG
            CFILT = STRING_Kxy(3:3) ; IFILT_REST_DMP = FILTINDX(CFILT)
            CFILT = STRING_Kxy(4:4) ; IFILT_OBS_DMP  = FILTINDX(CFILT)
            USE_LINE_ARGS(i) = .TRUE.

         else if ( ARG .EQ. 'REST_COLOR' ) then ! Apr 28 2016
            i = i + 1   
            READ(ARG_NEXT,*) STRING_REST_COLOR  ! e.g., 'B-V'
            if ( STRING_REST_COLOR(2:2) .NE. '-' ) then
              c1err = 'Invalid REST_COLOR argument: '
     &                // STRING_REST_COLOR
              c2err = 'Must be of the form X-Y'
              CALL MADABORT(FNAM,C1ERR, C2ERR)
            endif
            CFILT = STRING_REST_COLOR(1:1) 
            IFILT_RESTCOLOR_DMP(1) = FILTINDX(CFILT)
            CFILT = STRING_REST_COLOR(3:3) 
            IFILT_RESTCOLOR_DMP(2) = FILTINDX(CFILT)
        
            i = i + 1   
            READ(ARG_NEXT,*) MAGREST_COLOR 
            MAGREST(1) = MAGREST_COLOR
            MAGREST(2) = 0.0

         else if ( ARG .EQ. 'TREST' ) then
            i = i + 1   
            if ( ARG_NEXT .EQ. 'ALL' ) then
               CALL SET_TREST_ALL
            else
               READ(ARG_NEXT,*) TREST_DMP
               TREST_DMP_RANGE(1) = TREST_DMP
               TREST_DMP_RANGE(2) = TREST_DMP
            endif

         else if ( ARG .EQ. 'REDSHIFT' .or. 
     &             ARG .EQ. 'Z'        .or.
     &             ARG .EQ. 'z' ) then

            i = i + 1   
            if ( ARG_NEXT .EQ. 'ALL' ) then
               REDSHIFT_DMP = 0.0
               NZBIN_DMP    = 100  ! flag to use REDSFHIT range in KCOR file
            else
               READ(ARG_NEXT,*) REDSHIFT_DMP
               REDSHIFT_DMP_RANGE(1) = REDSHIFT_DMP
               REDSHIFT_DMP_RANGE(2) = REDSHIFT_DMP
            endif

         else if ( ARG .EQ. 'KCOR_FILE' ) then
            i = i + 1
            KCOR_FILE = ARG_NEXT
         endif

c set logical flag for used LINE_ARGS
 
         IF ( i > ilast ) THEN
           DO iuse = ilast, i
              USE_LINE_ARGS(iuse) = .TRUE.
           ENDDO
         ENDIF

         i = i + 1
         ilast = i

      ENDDO

c make sure that all command line args are valid;
c if not, then abort.

cc      print*,'  USE_LINE_ARGS = ', ( USE_LINE_ARGS(i), i=1, 10)
      CALL CHECK_LINE_ARGS

C ----------------------------------------------
c  prompt user to enter missing arguments that were
c  not given on the command line.

      print*,' '

      IF ( IFILT_REST_DMP .LE. 0 ) THEN        
        write(6,50) 'FILT_REST (' // FILTDEF_STRING(1:62) // ')'
        read(5,55) CFILT
        IFILT_REST_DMP = FILTINDX(CFILT)
      ENDIF

      IF ( IFILT_OBS_DMP .LE. 0 ) THEN
        write(6,50) 'IFILT_OBS (' // FILTDEF_STRING(1:62) // ')'
        read(5,55) CFILT
        IFILT_OBS_DMP = FILTINDX(CFILT)
      ENDIF

      IF ( REDSHIFT_DMP .LT. 0.0 ) THEN
        write(6,50) 'REDSHIFT'
        read(5,*) CTEMP
        if ( CTEMP(1:3) .EQ. 'ALL') then 
           NZBIN_DMP = 100  ! flag to use REDSFHIT range in KCOR file
        else
           READ(ctemp,*) REDSHIFT_DMP
           REDSHIFT_DMP_RANGE(1) = REDSHIFT_DMP
           REDSHIFT_DMP_RANGE(2) = REDSHIFT_DMP
        endif

      ENDIF

      IF ( TREST_DMP .LT. -90.0 ) THEN
        write(6,50) 'TREST'
        read(5,*) CTEMP
        if ( CTEMP(1:3) .EQ. 'ALL') then 
           call SET_TREST_ALL
        else
           READ(ctemp,*) TREST_DMP
           TREST_DMP_RANGE(1) = TREST_DMP
           TREST_DMP_RANGE(2) = TREST_DMP
        endif
      ENDIF

      IF ( KCOR_FILE .EQ. '' ) THEN
        write(6,50) 'KCOR_FILE'
        read(5,55) KCOR_FILE
      ENDIF

50    format(T5,'Enter ',A,' ==> ', $)
51    format(I2)
52    format(F10.5)
55    format(A)

      RETURN
      END

C =============================
+DECK,SET_REDSHIFT_ALL.
      SUBROUTINE SET_REDSHIFT_ALL
      IMPLICIT NONE
+CDE,SNDATCOM.
+CDE,DUMPCOM.
      REAL DIF, BIN
C ---------- BEGIN ----------------

      REDSHIFT_DMP_RANGE(1) = GRIDVAL_Z(1)
      REDSHIFT_DMP_RANGE(2) = GRIDVAL_Z(NZBIN_KCOR)
      dif = REDSHIFT_DMP_RANGE(2) - REDSHIFT_DMP_RANGE(1)
      bin = REDSHIFT_DMP_BINSIZE
      NZBIN_DMP = int(dif/bin + 0.0001) + 1

      RETURN
      END

C =============================
+DECK,SET_TREST_ALL.
      SUBROUTINE SET_TREST_ALL
      IMPLICIT NONE
+CDE,DUMPCOM.
      REAL DIF
C ---------- BEGIN ----------------
      TREST_DMP          = 0.0
      TREST_DMP_RANGE(1) = TREST_DMP_MIN
      TREST_DMP_RANGE(2) = TREST_DMP_MAX
      DIF = (TREST_DMP_MAX - TREST_DMP_MIN)
      NTBIN_DMP = INT(DIF / TREST_DMP_BINSIZE + 0.001) + 1
      RETURN
      END

